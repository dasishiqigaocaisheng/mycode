/*******************************************************************************
 *|-----------------------------------图形库-----------------------------------|*
 *|-------------------------------@大四十七高材生------------------------------|*
 *|----------------------------------2021.1.22---------------------------------|*
 *|基于显存操作的图形库，提供基本的图形绘制函数--------------------------------|*
 ********************************************************************************/
#ifndef _GRAPHIC_H_
#define _GRAPHIC_H_

#include "BMP.h"
#include "CharLib.h"
#include "LinkedList.h"
#include "Framework.h"
#include "Graphic_DataStructure.h"

//常用颜色
#define WHITE 0xffff           //白
#define BLACK 0x0000           //黑
#define TIANYI_BLUE 0x667f     //蓝
#define ALING_RED 0xe800       //红
#define YANHE_GREEN 0x7f9      //绿
#define LONGYA_GREEN 0x32c     //绿
#define QINGXIAN_YELLOW 0xffe0 //黄
#define MOKE_BLUE 0x41f        //蓝
#define PURE_BLUE 0x1f         //纯蓝
#define PURE_RED 0xf800        //纯红
#define DEEP_GRAY 0x3186       //深灰
#define GRAY 0x738e            //灰

/***********************************************************************************************************************************************************
 *功能：初始化screen对象
 *参数：1.sc：screen对象
 *      2.id：屏幕ID号
 *      3.width：屏幕宽度（像素）
 *      4.height：屏幕高度（像素）
 *      5.bmpdcdr_bufsize：用于BMP解码的缓存空间大小（字节）
 *      6.rstr_bufsize：用于光栅化的缓存空间大小（字节）
 *      7.txtprs_bufsize：用于文本处理的缓存空间大小（字节）
 *      8.txtprprs_bufsize：用于文本预处理的缓存空间大小（字节）
 *      9.vir：屏幕的画布是否是虚拟的？
 *      10.auto_malloc：是否自动分配画布显存？
 *      11.gram：手动分配的画布显存地址（只有当vir==Disable且auto_malloc==Disable时此参数才有意义）
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Screen_Prepare(screen *sc, int8_t id, uint16_t width, uint16_t height, uint16_t bmpdcdr_bufsize, uint16_t rstr_bufsize, uint16_t txtprs_bufsize, uint16_t txtprprs_bufsize, status_flag vir, status_flag auto_malloc, const uint16_t *gram);

/***********************************************************************************************************************************************************
 *功能：通过串口输出画布的信息
 *参数：1.c：画布对象
 *返回：void
 *说明值：默认从USART1输出
 ***********************************************************************************************************************************************************/
void Graphic_Print_CanvasInfo(canvas *c);

/***********************************************************************************************************************************************************
 *功能：
 *参数：
 *返回：
 ***********************************************************************************************************************************************************/
void Graphic_Print_ChildCanvas(canvas *c);

/***********************************************************************************************************************************************************
 *功能：添加子画布
 *参数：1.parent_c：父画布
 *      2.x：子画布在父画布的x坐标
 *      3.y：子画布在父画布的y坐标
 *      4.width：子画布宽度
 *      5.height：子画布高度
 *      6.vir：子画布是否是虚拟的
 *      7.auto_malloc：子画布是否自动分配显存
 *      8.gram：手动分配的画布显存地址（只有当vir==Disable且auto_malloc==Disable时此参数才有意义）
 *返回值：新创建的画布对象
 ***********************************************************************************************************************************************************/
canvas *Graphic_Screen_Add_ChildCanvas(canvas *parent_c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, status_flag vir, status_flag auto_malloc, const uint16_t *gram);

/***********************************************************************************************************************************************************
 *功能：获得绝对坐标
 *参数：1.child_c：子画布
 *      2.parent_c：父画布（参考画布）
 *      3.x：x坐标
 *      4.y：y坐标
 *返回值：void
 *说明：也就是获得child_c在parent_c中的坐标，必须保证child_c是parent_c的一个子画布
 ***********************************************************************************************************************************************************/
void Graphic_Screen_Get_AbsoluteCoordinate(canvas *child_c, canvas *parent_c, uint16_t *x, uint16_t *y);

/***********************************************************************************************************************************************************
 *功能：屏幕刷新（同步）
 *参数：1.sc：屏幕对象
 *返回值：void
 *说明：此函数将sc->Canvas的显存立即输出到屏幕上
 ***********************************************************************************************************************************************************/
void Graphic_Screen_Refresh(screen *sc);

/***********************************************************************************************************************************************************
 *功能：尝试屏幕刷新
 *参数：1.sc：屏幕对象
 *返回值：void
 *说明：此函数将sc->Canvas的显存尝试输出到屏幕上
 ***********************************************************************************************************************************************************/
void Graphic_Screen_Refresh_Try(screen *sc);

/***********************************************************************************************************************************************************
 *功能：设置画布是否为虚拟
 *参数：1.c：画布对象
 *      2.vir：指示画布的虚拟性
 *返回值：void
 *说明：设置画布的Virtual值可能会导致画布显存的分配或释放
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_Virtual_Set(canvas *c, status_flag vir);

/***********************************************************************************************************************************************************
 *功能：设置画布是否允许透写
 *参数：1.c：画布对象
 *      2.wt：只是画布是否允许透写
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_WriteThrough_Set(canvas *c, status_flag wt);

/***********************************************************************************************************************************************************
 *功能：设置画布的显存地址
 *参数：1.c：画布对象
 *      2.gram：要设置的显存地址
 *返回值：void
 *说明：只有画布Auto_Malloc==Disable时才有效
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_GRAM_Set(canvas *c, const uint16_t *gram);

/***********************************************************************************************************************************************************
 *功能：画布更新
 *参数：1.c：画布对象
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_Update(canvas *c);

/***********************************************************************************************************************************************************
 *功能：将画布显存更新到屏幕上（同步）
 *参数：1.c：画布对象
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_Flush(canvas *c);

/***********************************************************************************************************************************************************
 *功能：尝试将画布显存更新到屏幕上
 *参数：1.c：画布对象
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_Flush_Try(canvas *c);

/***********************************************************************************************************************************************************
 *功能：销毁画布
 *参数：1.c：画布对象
 *      2.also_dispose_childcanvas：是否也销毁此画布的子画布
 *返回值：void
 *说明：also_dispose_childcanvas==Enable时，画布的所有子画布（包括子画布的子画布）都会被销毁
 *      also_dispose_childcanvas==Disable时，只销毁此画布，其子画布会成为被销毁画布父画布的子画布
 ***********************************************************************************************************************************************************/
void Graphic_Canvas_Dispose(canvas *c, status_flag also_dispose_childcanvas);

/***********************************************************************************************************************************************************
 *功能：将整块画布显示某种颜色
 *参数：1.c：要绘制的画布对象
 *	   2.color：颜色
 *返回值：void
 ***********************************************************************************************************************************************************/
void Graphic_Draw_Color(canvas *c, uint16_t color);

/***********************************************************************************************************************************************************
 *功能：绘制矩形
 *参数：1.c：要绘制的画布对象
 *	   2.x：矩形左上角相对画布的x坐标
 *	   3.y：矩形左上角相对画布的y坐标
 *	   4.r：矩形类，它定义了该矩形的样式
 *返回值：void
 *说明：该函数有三个衍生型，它们有的只是参数发生变化，有的则功能不同
 *      1.Graphic_Draw_Rectangle_FullDirect：将r替换为一个用，width（宽）
 *        height（高），bcolor（背景颜色），thickness（边框厚度）和fcolor（边框颜色）
 *        所描述的矩形区域。
 *      2.Graphic_Draw_Rectangle_OnlyFrame：x,y,width,height用来描述矩形区域，
 *        thickness表示边框厚度，fcolor表示边框颜色。该方法不能显示带有背景
 *        的矩形。
 *      3.Graphic_Draw_Rectangle_Direct：x,y,width,height用来描述矩形区域，
 *        color代表背景颜色。该方法绘制的矩形边框厚度为0。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_Rectangle_Full(canvas *c, uint16_t x, uint16_t y, rectangle *r);
void Graphic_Draw_Rectangle_FullDirect(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t bcolor, uint16_t thickness, uint16_t fcolor);
void Graphic_Draw_Rectangle_onlyFrame(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t thickness, uint16_t fcolor);
void Graphic_Draw_Rectangle_Direct(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color);

/***********************************************************************************************************************************************************
 *功能：绘制线段
 *参数：1.c：要绘制的画布对象
 *	   2.x1：线一端相对画布的横坐标
 *	   3.y1：线一端相对画布的纵坐标
 *	   4.x2：线另一端相对画布的横坐标
 *	   5.y2：线另一端相对画布的纵坐标
 *	   6.l：线类，它定义了线的样式
 *返回值：void
 *说明：该函数有一个衍生型，它具有不同形式的参数
 *      1.Graphic_Draw_Line_FullDirect：使用参数width（线宽），color（线颜色），slen（实线长度），vlen（虚线长度）来代替l
 ***********************************************************************************************************************************************************/
void Graphic_Draw_Line_Full(canvas *c, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, line *l);
void Graphic_Draw_Line_FullDirect(canvas *c, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t width, uint16_t color, uint8_t slen, uint8_t vlen);

/***********************************************************************************************************************************************************
 *功能：绘制圆（风格1）
 *参数：1.c：要绘制的画布
 *	   2.x：圆心相对画布的横坐标
 *	   3.y：圆心相对画布的纵坐标
 *	   4.r：半径
 *	   5.color：颜色
 *	   6.thickness：圆环厚度
 *返回值：void
 *说明：该函数绘制的圆的宽度向圆内外同时延申
 *说明：该函数有一个衍生型，它具有不同的功能
 *      1.Graphic_Draw_Circle_Style2：该函数绘制的圆的宽度只向圆内（外）延申，thickness为正数则向外，为负数则向内
 ***********************************************************************************************************************************************************/
void Graphic_Draw_Circle_Style1(canvas *c, uint16_t x, uint16_t y, uint16_t r, uint16_t color, uint8_t thickness);
void Graphic_Draw_Circle_Style2(canvas *c, uint16_t x, uint16_t y, uint16_t r, uint16_t color, int8_t thickness);

/***********************************************************************************************************************************************************
 *功能：绘制一副BMP格式图片
 *参数：1.c：要绘制的画布
 *	   2.x：图片左上角相对于画布的横坐标
 *	   3.y：图片左上角相对于画布的纵坐标
 *	   4.p：图片的BMP结构体地址
 *返回值：void
 *说明：该函数有两个两个衍生型，它们在参数和功能上都有一定区别
 *      1.Graphic_Draw_BMP_inArea：width和height指定显示区域的宽和高，而图片会平铺在区域内，这意味着图像可能会被放缩。
 *      2.Graphic_Draw_BMP_withSize：size表示图像的缩放比例，图像会按照这个系数进行缩放。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_BMP_Direct(canvas *c, uint16_t x, uint16_t y, BMP *p);
void Graphic_Draw_BMP_inArea(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, BMP *p);
void Graphic_Draw_BMP_withSize(canvas *c, uint16_t x, uint16_t y, float size, BMP *p);

/***********************************************************************************************************************************************************
 *功能：绘制一幅rBMP格式图片
 *参数：1.c：要绘制的画布
 *	   2.x：图片左上角相对于画布的横坐标
 *	   3.y：图片左上角相对于画布的纵坐标
 *	   4.p：图片的rBMP结构体地址
 *返回值：void
 *说明：该函数有两个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Draw_rBMP2_inArea：width和height指定显示区域的宽和高，而图片会平铺在区域内，这意味着图像可能会被放缩。
 *      2.Graphic_Draw_rBMP3_withSize：size表示图像的缩放比例，图像会按照这个系数进行缩放。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_rBMP_Direct(canvas *c, uint16_t x, uint16_t y, rBMP *p);
void Graphic_Draw_rBMP2_inArea(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, rBMP *p);
void Graphic_Draw_rBMP3_withSize(canvas *c, uint16_t x, uint16_t y, float size, rBMP *p);

/***********************************************************************************************************************************************************
 *功能：绘制一幅pBMP格式的图片
 *参数：1.c：要绘制的画布
 *	   2.x：图片左上角相对于画布的横坐标
 *	   3.y：图片左上角相对于画布的纵坐标
 *	   4.p：图片的pBMP结构体地址
 *返回值：void
 *说明：该函数有两个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Draw_pBMP_inArea：width和height指定显示区域的宽和高，而图片会平铺在区域内，这意味着图像可能会被放缩。
 *      2.Graphic_Draw_pBMP_withSize：size表示图像的缩放比例，图像会按照这个系数进行缩放。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_pBMP_Direct(canvas *c, uint16_t x, uint16_t y, pBMP *p);
void Graphic_Draw_pBMP_inArea(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, pBMP *p);
void Graphic_Draw_pBMP_withSize(canvas *c, uint16_t x, uint16_t y, float size, pBMP *p);

/***********************************************************************************************************************************************************
 *功能：绘制一幅prBMP格式的图片
 *参数：1.c：要绘制的画布
 *	   2.x：图片左上角相对于画布的横坐标
 *	   3.y：图片左上角相对于画布的纵坐标
 *	   4.p：图片的prBMP结构体地址
 *说明：该函数有两个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Draw_prBMP_inArea：width和height指定显示区域的宽和高，而图片会平铺在区域内，这意味着图像可能会被放缩。
 *      2.Graphic_Draw_prBMP_withSize：size表示图像的缩放比例，图像会按照这个系数进行缩放。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_prBMP_Direct(canvas *c, uint16_t x, uint16_t y, prBMP *p);
void Graphic_Draw_prBMP_inArea(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, prBMP *p);
void Graphic_Draw_prBMP_withSize(canvas *c, uint16_t x, uint16_t y, float size, prBMP *p);

/***********************************************************************************************************************************************************
 *功能：绘制一幅bmp格式的图片
 *参数：1.c：要绘制的画布
 *	   2.x：图片左上角相对于画布的横坐标
 *	   3.y：图片左上角相对于画布的纵坐标
 *	   4.p：图片的bmp结构体地址
 *说明：该函数有两个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Draw_BMP_All_inArea：width和height指定显示区域的宽和高，而图片会平铺在区域内，这意味着图像可能会被放缩。
 *      2.Graphic_Draw_BMP_All_withSize：size表示图像的缩放比例，图像会按照这个系数进行缩放。
 ***********************************************************************************************************************************************************/
void Graphic_Draw_BMP_All_Direct(canvas *c, uint16_t x, uint16_t y, bmp *p);
void Graphic_Draw_BMP_All_inArea(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, bmp *p);
void Graphic_Draw_BMP_All_withSize(canvas *c, uint16_t x, uint16_t y, float size, bmp *p);

/***********************************************************************************************************************************************************
 *功能：绘制一个字符
 *参数：1.c：画布对象
 *      2.x：字符的x坐标
 *      3.y：字符的y坐标
 *      4.ch：字符码
 *      5.bcolor：字符的背景颜色
 *      6.ccolor：字符颜色
 *      7.mold：要使用的字库
 *返回：void
 ***********************************************************************************************************************************************************/
void Graphic_Draw_Char(canvas *c, uint16_t x, uint16_t y, uint8_t ch, uint16_t bcolor, uint16_t ccolor, const charmold *mold);

/***********************************************************************************************************************************************************
 *功能：绘制字符串
 *参数：1.c：画布对象
 *      2.x：字符串x坐标
 *      3.y：字符串y坐标
 *      4.width：绘制区域的宽度
 *      5.height：绘制区域的高度
 *      6.valign：竖直对齐方式
 *      7.halign：水平对齐方式
 *      8.f：字体
 *      9.str：要显示的字符串
 *返回：void
 *说明：该函数有三个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Draw_String_inGridFull：用line和row替换width和height来指定字符串的行和列
 *      2.Graphic_Draw_String_inAreaDirect：使用bcolor、ccolor和mold来替换f
 *      3.Graphic_Draw_String_inGridDirect：用line和row替换width和height来指定字符串的行和列并且使用bcolor、ccolor和mold来替换f
 ***********************************************************************************************************************************************************/
void Graphic_Draw_String_inAreaFull(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t valign, uint8_t halign, font *f, const char *str);
void Graphic_Draw_String_inGridFull(canvas *c, uint16_t x, uint16_t y, short line, short row, uint8_t valign, uint8_t halign, font *f, const char *str);
void Graphic_Draw_String_inAreaDirect(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t valign, uint8_t halign, uint16_t bcolor, uint16_t ccolor, const charmold *mold, const char *str);
void Graphic_Draw_String_inGridDirect(canvas *c, uint16_t x, uint16_t y, short line, short row, uint8_t valign, uint8_t halign, uint16_t bcolor, uint16_t ccolor, const charmold *mold, const char *str);

/***********************************************************************************************************************************************************
 *功能：绘制格式化字符串
 *参数：1.c：画布对象
 *      2.x：绘制区域的x坐标
 *      3.y：绘制区域的y坐标
 *      4.valign：竖直对齐方式
 *      5.halign：水平对齐方式
 *      6.f：字体
 *      7.fstr：格式化字符串
 *      8...：可变参数
 *返回：void
 *说明：该函数有三个衍生型，它们在参数和功能上有一定区别
 *      1.Graphic_Printf_inGridFull：用line和row替换width和height来指定字符串的行和列
 *      2.Graphic_Printf_inAreaDirect：使用bcolor、ccolor和mold来替换f
 *      3.Graphic_Printf_inGridDirect：用line和row替换width和height来指定字符串的行和列并且使用bcolor、ccolor和mold来替换f
 ***********************************************************************************************************************************************************/
void Graphic_Printf_inAreaFull(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t valign, uint8_t halign, font *f, const char *fstr, ...);
void Graphic_Printf_inGridFull(canvas *c, uint16_t x, uint16_t y, short line, short row, uint8_t valign, uint8_t halign, font *f, const char *fstr, ...);
void Graphic_Printf_inAreaDirect(canvas *c, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t valign, uint8_t halign, uint16_t bcolor, uint16_t ccolor, const charmold *mold, const char *fstr, ...);
void Graphic_Printf_inGridDirect(canvas *c, uint16_t x, uint16_t y, short line, short row, uint8_t valign, uint8_t halign, uint16_t bcolor, uint16_t ccolor, const charmold *mold, const char *fstr, ...);

#endif
