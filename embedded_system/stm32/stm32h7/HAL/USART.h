/**************************************************************************************
*|----------------------------------STM32串口操作库----------------------------------|*
*|----------------------------------@大四十七高材生----------------------------------|*
*|---------------------------------最后更新2021.1.17---------------------------------|*
*|适用于：STM32F40/41/42系列														 |*
*|本库提供了一些基于异同步串口（USART）的IO操作方法，包括格式化输入、格式化输出、数据|*
*||流输入输出等功能。																 |*
***************************************************************************************/
#ifndef _USART_H_
#define _USART_H_
#include "sys.h"

//开启Debug模式
//#define USART_DEBUG

//USART_Scanf的输入缓存区大小
#define USART_CACHE_SIZE	1024

//获取RXNE（接收寄存器非空）值
//usart：串口寄存器结构体
#define USART_Get_RXNE(usart)		((usart->ISR>>5)&1)

//清除RXNE位
//usart：串口寄存器结构体
#define USART_Clear_RXNE(usart);	usart->RQR|=1<<3

//使能串口接收中断
//usart：串口寄存器结构体
#define USART_Receive_Interrupt_Enable(usart) USART_Clear_RXNE(usart);\
											  (usart->CR1|=1<<5)

//失能串口接收中断
//usart：串口寄存器结构体
#define USART_Receive_Interrupt_Disable(usart)	(usart->CR1&=~(1<<5))

//发送/接收DMA使能
//usart：串口寄存器结构体
#define USART_Send_DMA_Enable(usart)	(usart->CR3|=1<<7)
#define USART_Receive_DMA_Enable(usart)	(usart->CR3|=1<<6)

//发送/接收DMA失能
//usart：串口寄存器结构体
#define USART_Send_DMA_Disable(usart)	(usart->CR3&=~(1<<7))
#define USART_Receive_DMA_Disable(usart)	(usart->CR3&=~(1<<6))
#endif

//中断回调函数定义
typedef void (*Usart_IRQHandler)(void);

/******************************************************
*波特率计算公式：									  *
*			Boundrate=fPLCK/(16*USARTDIV)			  *
*		 >> USARTDIV=fPLCK/(Boundrate*16)			  *
*		 											  *
*		 注意：USART1属于APB2总线					  *
*			   USART2属于APB1总线，					  *
*			   一般情况下，fAPB2=84MHz；fAPB1=42MHz   *
*			   在STM32F429时，fAPB2=90MHz；fAPB1=15MHz*
*******************************************************/

/********************************************************************
*函数功能：串口的初始化配置，默认设置为：16倍过采样，八位数据，一位 *
*		   停止位，不带校验位。										*
*参数：1.USART：串口对应的寄存器组结构体							*
*	   2.Boundrate：要设置的波特率									*
*********************************************************************/
void USART_Init(USART_TypeDef* USART, u32 Boundrate);

/********************************************************
*功能：串口接收超时检测设置								*
*参数：1.USART：串口寄存器组结构体						*
*	   2.Enable：1：开启超时检测						*
*				 0：关闭超时检测						*
*说明：当开启后，调用任何串口接收函数时，如果在一定时间 *
*	   内没有接收到数据就会返回异常。超时检测默认是关闭 *
*	   的。												*
*********************************************************/
void USART_Time_Out_Set(USART_TypeDef* USART, u8 Enable);

/************************************************************
*功能：配置串口中断的参数，但是此函数不会使能接收中断		*
*参数：1.USART：串口寄存器组结构体							*
*	   2.Group：中断组号									*	
*	   3.PrePriority：抢占优先级							*
*	   4.SubPriority：响应优先级							*
*	   5.CallBackFunc：中断回调函数							*
*************************************************************/
void USART_Interrupt_Set(USART_TypeDef* USART, u8 Group, u8 PrePriority, u8 SubPriority, Usart_IRQHandler CallbackFunc);

/**********************************************************************
*功能：发送一个数据流												  *
*参数：1.USART：串口对应的寄存器组结构体							  *
*	   2.DATA：流地址												  *
*	   3.Length：数据流长度（字节）									  *
***********************************************************************/
void USART_Send_Data_Flow(USART_TypeDef* USART, void* DATA, u32 Length);

/*****************************************************************
*格式化输出														 *
*参数：1.USART：串口对应的寄存器组结构体						 *
*	   2.Format_String：格式化字符串，支持以下几种转义字符：	 *
*		 %d：有符号十进制整数									 *
*		 %u：无符号十进制整数									 *
*		 %x：十六进制整数										 *
*		 %.xf：单精度浮点数，x表示小数位数						 *
*		 %f：单精度浮点数，3位小数								 *
*		 %s：字符串												 *
******************************************************************/
void USART_Printf(USART_TypeDef* USART, char* Format_String, ...);

/*************************************************************
*格式化输入													 *
*参数：1.USART：串口对应的寄存器组结构体					 *
*	   2.Format_String：格式化字符串，支持以下几种转义字符： *
*		 %d：有符号十进制整数								 *
*		 %u：无符号十进制整数								 *
*		 %x：十六进制整数									 *
*		 %.xf：单精度浮点数，x代表小数位数					 *
*		 %f：单精度浮点数，3位小数							 *
*		 %s：字符串											 *
*返回值：成功读取到的数据的个数（从左开始）					 *
		 例如：格式化字符串为："%d %x %f %s"，那么返回1代表只*
		 有%d被读取，返回2代表只有%d和%x被读取。			 *
*说明：该函数首先调用USART_Receive_Data_Flow_EndwithCharacter*
	   函数，接收一个以1个0x0a(\n)结尾的数据流，然后从该数据 *
	   流中读取数据并放入可变参数指向的变量中。在读取到第一个*
	   数据之前，缓冲区所有的空白字符都会被忽视并跳过，然后才*
	   开始将格式化字符串和接收数据流对比，获取数据。		 *
**************************************************************/
int USART_Scanf(USART_TypeDef* USART, char* Format_String, ...);

/***************************************************************************************
*接收一定长度的数据流																   *
*参数：1.USART：串口对应的寄存器组结构体											   *
*	   2.DATA：接收缓存地址															   *
*	   3.Length：数据长度（字节）													   *
*返回值：0：正常																	   *
*		 1：超时																	   *
****************************************************************************************/
u8 USART_Receive_Data_Flow_EndwithLength(USART_TypeDef* USART, void *DATA, u32 Length);

/*******************************************************************************************************
*接收以某个字符结尾的数据流																			   *
*参数：1.USART：串口对应的寄存器组结构体															   *
*	   2.DATA：接收缓存地址																			   *
*	   3.END：结束字符																				   *
*	   4.Repeat_Time：结束字符重复次数，当检测到END重复Repeat_Time次后，代表流接收完毕				   *
*返回值：0：超时																					   *
*		 非0：接收到的字节数（包括结束字符）														   *
********************************************************************************************************/
u32 USART_Receive_Data_Flow_EndwithCharacter(USART_TypeDef* USART, void *DATA, char END, u8 Repeat_Time);

#ifdef USART_DEBUG
/**************************************************
*串口测试函数									  *
*参数：1.USART：要被测试的串口对应的寄存器组结构体*
***************************************************/
void USART_Test(USART_TypeDef* USART);
#endif

