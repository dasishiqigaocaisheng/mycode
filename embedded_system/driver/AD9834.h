/*******************************************************************************
AD9834模块驱动																   *
AD9834模块：5V供电，0~37.5MHz输出，分辨率0.28Hz								   *
适用MCU：STM32F4系列													       *
AD9834输出信号幅度：														   *
	AD9834属于电流输出型DAC，在FS_ADJUST引脚与GND之间连接一个电阻Rset，		   *
	那么IOUT输出满量程电流为：IOUTfullscale=18*FSADJUST/Rset，				   *
														其中：FSADJUST=1.15V   *
********************************************************************************/
#ifndef _AD9834_H_
#define _AD9834_H_
#include "sys.h"

//一系列指令宏，对应了一个16位寄存器上的各个位
/******************************各个位的功能说明******************************************
	B28：AD9834具有两个28位频率寄存器（FREQ0/FREQ1），它指定了信号的输出频率，			*
			 当B28=1，可以连续将两个14位数据写入1个寄存器，而维持另一个不变，			*	
			 当B28=0，28位频率寄存器用作两个14位寄存器，可以只更新14位MSB或LSB，		*
			 					这取决于HLB位。											*
	HLB：只有B28=0，才能起作用，														*
			 当HLB=1，写入MSB，															*
			 当HLB=0，写入LSB。															*
	FSEL：按照FREQ0还是FREQ1来输出信号，												*
				当FSEL=0，选择FREQ0，													*
				当FSEL=1，选择FREQ1。													*
	PSEL：AD9834有两个相位寄存器（PHASE0/PHASE1），它们决定了信号的初相，				*
				该位决定了是选择PHASE0还是PHASE1作用于输出，							*
				当PSEL=0，选择PHASE0，													*
				当PSEL=1，选择PHASE1。													*
	PIN_SW：使用硬件（引脚）还是软件（寄存器）来控制内部资源，							*
					默认使用软件，建议不要更改此位设置。								*
	RESET：是否进行复位操作。															*
				 当RESET=1，进行复位，不再输出信号，但是频率，相位和控制寄存器的值不变，*
				 当RESET=0，禁用复位													*
	SLEEP1：当SLEEP1=1，内部时钟禁用，输出信号不再变化。								*
			当SLEEP1=0，时钟使能，正常输出。											*
	SLEEP12：当SLEEP12=1，关断DAC。														*
			 当SLEEP12=0，开启DAC。														*
	OPBITEN：控制SIGN BIT OUT引脚是否输出，												*
					 当OPBITEN=1，使能SIGN BIT OUT引脚，								*
					 当OPBITEN=0，SIGN BIT OUT不作为输出，且处于高阻态。				*
	SIGN_PIB：此位决定了SIGN BIT OUT的输出信号，										*
						当SIGN_PIB=1，输出方波，										*
						当SIGN_PIB=0，输出DAC的MSB或MSB/2，这由DIV2位决定。				*
	DIV2：当SIGN_PIB=0，此位有用，当SIGN_PIB=1，此位应保持1，							*
		  当DIV2=0，MSB/2，																*
		  当DIV2=1，MSB。																*
	MODE：该位决定IOUT/IOUTB的输出，若OPBITEN=1，此位应为0，							*
				当MODE=1，输出三角波，													*
				当MODE=0，输出正弦信号。												*
*****************************************************************************************/
#define B28		 1<<13
#define HLB		 1<<12
#define FSEL	 1<<11
#define PSEL	 1<<10
#define PIN_SW	 1<<9
#define RESET	 1<<8
#define SLEEP1	 1<<7
#define SLEEP12	 1<<6
#define OPBITEN	 1<<5
#define SIGN_PIB 1<<4
#define DIV2	 1<<3
#define MODE	 1<<1

//ON：将该位置1
//OFF：将该位置0
#define ON 	1
#define OFF 0

/**********************************************************
功能：向AD9834某个寄存器写数据（寄存器地址由数据内容决定）*
参数：1.Data：要写的数据								  *
***********************************************************/	
void AD9834_Write_Register(u16 Data);

/************************************************************
功能：向AD9834某个寄存器位写数据（ON/OFF）				    *
参数：1.Cmd：只能有0和1两个值，代表向该位置0或1			    *
	  2.ControlData：寄存器各个位的宏，代表要改变的寄存器位 *
*************************************************************/
void AD9834_Write_ControlRegister(u8 Cmd, u16 ControlData);

/***********************************
功能：AD9834的初始化，直接引用即可 *
************************************/
void AD9834_Init(void); 

/****************************************
功能：向某个频率寄存器连续写28位频率值  *
参数：1.Addr：寄存器地址，只能是0或1    *
	  2.Frequency：要写的频率			*
*****************************************/
void AD9834_Write_28BitsFrequencyRegister(u8 Addr, u32 Frequency);

/********************************************
功能：向某个相位寄存器写相位				*
参数：1.Addr：相位寄存器的地址，只能是0或1	*
	  2.Phase：要写的相位值					*
*********************************************/				
void AD9834_Write_PhaseRegister(u8 Addr, float Phase);



#endif
